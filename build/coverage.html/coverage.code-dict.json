{"/home/travis/build/npmtest/node-npmtest-ffmpeg/test.js":"/* istanbul instrument in package npmtest_ffmpeg */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ffmpeg/lib.npmtest_ffmpeg.js":"/* istanbul instrument in package npmtest_ffmpeg */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ffmpeg = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ffmpeg = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ffmpeg/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ffmpeg && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ffmpeg */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ffmpeg\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ffmpeg.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ffmpeg.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ffmpeg.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ffmpeg.__dirname + '/lib.npmtest_ffmpeg.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ffmpeg/node_modules/ffmpeg/index.js":"module.exports = require('./lib/ffmpeg');","/home/travis/build/npmtest/node-npmtest-ffmpeg/node_modules/ffmpeg/lib/ffmpeg.js":"var when\t\t= require('when')\n  , fs\t\t\t= require('fs');\n\nvar errors\t\t= require('./errors')\n  , utils\t\t= require('./utils')\n  , configs\t\t= require('./configs')\n  , video\t\t= require('./video');\n\nvar ffmpeg = function (/* inputFilepath, settings, callback */) {\n\n\t/**\n\t * Retrieve the list of the codec supported by the ffmpeg software\n\t */\n\tvar _ffmpegInfoConfiguration = function (settings) {\n\t\t// New 'promise' instance \n\t\tvar deferred = when.defer();\n\t\t// Instance the new arrays for the format\n\t\tvar format = { modules : new Array(), encode : new Array(), decode : new Array() };\n\t\t// Make the call to retrieve information about the ffmpeg\n\t\tutils.exec(['ffmpeg','-formats','2>&1'], settings, function (error, stdout, stderr) {\n\t\t\t// Get the list of modules\n\t\t\tvar configuration = /configuration:(.*)/.exec(stdout);\n\t\t\t// Check if exists the configuration\n\t\t\tif (configuration) {\n\t\t\t\t// Get the list of modules\n\t\t\t\tvar modules = configuration[1].match(/--enable-([a-zA-Z0-9\\-]+)/g);\n\t\t\t\t// Scan all modules\n\t\t\t\tfor (var indexModule in modules) {\n\t\t\t\t\t// Add module to the list\n\t\t\t\t\tformat.modules.push(/--enable-([a-zA-Z0-9\\-]+)/.exec(modules[indexModule])[1]);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Get the codec list\n\t\t\tvar codecList = stdout.match(/ (DE|D|E) (.*) {1,} (.*)/g);\n\t\t\t// Scan all codec\n\t\t\tfor (var i in codecList) {\n\t\t\t\t// Get the match value\n\t\t\t\tvar match = / (DE|D|E) (.*) {1,} (.*)/.exec(codecList[i]);\n\t\t\t\t// Check if match is valid\n\t\t\t\tif (match) {\n\t\t\t\t\t// Get the value from the match\n\t\t\t\t\tvar scope = match[1].replace(/\\s/g,'')\n\t\t\t\t\t  , extension = match[2].replace(/\\s/g,'');\n\t\t\t\t\t// Check which scope is best suited\n\t\t\t\t\tif (scope == 'D' || scope == 'DE')\n\t\t\t\t\t\tformat.decode.push(extension);\n\t\t\t\t\tif (scope == 'E' || scope == 'DE')\n\t\t\t\t\t\tformat.encode.push(extension);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Returns the list of supported formats\n\t\t\tdeferred.resolve(format);\n\t\t});\n\t\t// Return 'promise' instance \n\t\treturn deferred.promise;\n\t}\n\t\n\t/**\n\t * Get the video info\n\t */\n\tvar _videoInfo = function (fileInput, settings) {\n\t\t// New 'promise' instance \n\t\tvar deferred = when.defer();\n\t\t// Make the call to retrieve information about the ffmpeg\n\t\tutils.exec(['ffmpeg','-i',fileInput,'2>&1'], settings, function (error, stdout, stderr) {\n\t\t\t// Perse output for retrieve the file info\n\t\t\tvar filename\t\t= /from \\'(.*)\\'/.exec(stdout) || []\n\t\t\t  , title\t\t\t= /(INAM|title)\\s+:\\s(.+)/.exec(stdout) || []\n\t\t\t  , artist\t\t\t= /artist\\s+:\\s(.+)/.exec(stdout) || []\n\t\t\t  , album\t\t\t= /album\\s+:\\s(.+)/.exec(stdout) || []\n\t\t\t  , track\t\t\t= /track\\s+:\\s(.+)/.exec(stdout) || []\n\t\t\t  , date\t\t\t= /date\\s+:\\s(.+)/.exec(stdout) || []\n\t\t\t  , is_synched\t\t= (/start: 0.000000/.exec(stdout) !== null)\n\t\t\t  , duration\t\t= /Duration: (([0-9]+):([0-9]{2}):([0-9]{2}).([0-9]+))/.exec(stdout) || []\n\t\t\t  \n\t\t\t  , container\t\t= /Input #0, ([a-zA-Z0-9]+),/.exec(stdout) || []\n\t\t\t  , video_bitrate\t= /bitrate: ([0-9]+) kb\\/s/.exec(stdout) || []\n\t\t\t  , video_stream\t= /Stream #([0-9\\.]+)([a-z0-9\\(\\)\\[\\]]*)[:] Video/.exec(stdout) || []\n\t\t\t  , video_codec\t\t= /Video: ([\\w]+)/.exec(stdout) || []\n\t\t\t  , resolution\t\t= /(([0-9]{2,5})x([0-9]{2,5}))/.exec(stdout) || []\n\t\t\t  , pixel\t\t\t= /[SP]AR ([0-9\\:]+)/.exec(stdout) || []\n\t\t\t  , aspect\t\t\t= /DAR ([0-9\\:]+)/.exec(stdout) || []\n\t\t\t  , fps\t\t\t\t= /([0-9\\.]+) (fps|tb\\(r\\))/.exec(stdout) || []\n\t\t\t  \n\t\t\t  , audio_stream\t= /Stream #([0-9\\.]+)([a-z0-9\\(\\)\\[\\]]*)[:] Audio/.exec(stdout) || []\n\t\t\t  , audio_codec\t\t= /Audio: ([\\w]+)/.exec(stdout) || []\n\t\t\t  , sample_rate\t\t= /([0-9]+) Hz/i.exec(stdout) || []\n\t\t\t  , channels\t\t= /Audio:.* (stereo|mono)/.exec(stdout) || []\n\t\t\t  , audio_bitrate\t= /Audio:.* ([0-9]+) kb\\/s/.exec(stdout) || []\n\t\t\t  , rotate\t\t\t= /rotate[\\s]+:[\\s]([\\d]{2,3})/.exec(stdout) || [];\n\t\t\t// Build return object\n\t\t\tvar ret = { \n\t\t\t\tfilename\t\t: filename[1] || ''\n\t\t\t  , title\t\t\t: title[2] || ''\n\t\t\t  , artist\t\t\t: artist[1] || ''\n\t\t\t  , album\t\t\t: album[1] || ''\n\t\t\t  , track\t\t\t: track[1] || ''\n\t\t\t  , date\t\t\t: date[1] || ''\n\t\t\t  , synched\t\t\t: is_synched\n\t\t\t  , duration\t\t: {\n\t\t\t\t\traw\t\t: duration[1] || ''\n\t\t\t\t  , seconds\t: duration[1] ? utils.durationToSeconds(duration[1]) : 0\n\t\t\t\t}\n\t\t\t  , video\t\t\t: {\n\t\t\t\t\tcontainer\t\t\t: container[1] || ''\n\t\t\t\t  , bitrate\t\t\t\t: (video_bitrate.length > 1) ? parseInt(video_bitrate[1], 10) : 0\n\t\t\t\t  , stream\t\t\t\t: video_stream.length > 1 ? parseFloat(video_stream[1]) : 0.0\n\t\t\t\t  , codec\t\t\t\t: video_codec[1] || ''\n\t\t\t\t  , resolution\t\t\t: {\n\t\t\t\t\t\tw : resolution.length > 2 ? parseInt(resolution[2], 10) : 0\n\t\t\t\t\t  , h : resolution.length > 3 ? parseInt(resolution[3], 10) : 0\n\t\t\t\t\t}\n\t\t\t\t  , resolutionSquare\t: {}\n\t\t\t\t  , aspect\t\t\t\t: {}\n\t\t\t\t  , rotate\t\t\t\t: rotate.length > 1 ? parseInt(rotate[1], 10) : 0\n\t\t\t\t  , fps\t\t\t\t\t: fps.length > 1 ? parseFloat(fps[1]) : 0.0\n\t\t\t\t}\n\t\t\t  , audio\t\t\t: {\n\t\t\t\t\tcodec\t\t\t\t: audio_codec[1] || ''\n\t\t\t\t  , bitrate\t\t\t\t: audio_bitrate[1] || ''\n\t\t\t\t  , sample_rate\t\t\t: sample_rate.length > 1 ? parseInt(sample_rate[1], 10) : 0\n\t\t\t\t  , stream\t\t\t\t: audio_stream.length > 1 ? parseFloat(audio_stream[1]) : 0.0\n\t\t\t\t  , channels\t\t\t: {\n\t\t\t\t\t\traw\t\t: channels[1] || ''\n\t\t\t\t\t  , value\t: (channels.length > 0) ? ({ stereo : 2, mono : 1 }[channels[1]] || 0) : ''\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\t// Check if exist aspect ratio\n\t\t\tif (aspect.length > 0) {\n\t\t\t\tvar aspectValue = aspect[1].split(\":\");\n\t\t\t\tret.video.aspect.x\t\t= parseInt(aspectValue[0], 10);\n\t\t\t\tret.video.aspect.y\t\t= parseInt(aspectValue[1], 10);\n\t\t\t\tret.video.aspect.string = aspect[1];\n\t\t\t\tret.video.aspect.value\t= parseFloat((ret.video.aspect.x / ret.video.aspect.y));\n\t\t\t} else {\n\t\t\t\t// If exists horizontal resolution then calculate aspect ratio\n\t\t\t\tif(ret.video.resolution.w > 0) {\n\t\t\t\t\tvar gcdValue = utils.gcd(ret.video.resolution.w, ret.video.resolution.h);\n\t\t\t\t\t// Calculate aspect ratio\n\t\t\t\t\tret.video.aspect.x\t\t= ret.video.resolution.w / gcdValue;\n\t\t\t\t\tret.video.aspect.y\t\t= ret.video.resolution.h / gcdValue;\n\t\t\t\t\tret.video.aspect.string = ret.video.aspect.x + ':' + ret.video.aspect.y;\n\t\t\t\t\tret.video.aspect.value\t= parseFloat((ret.video.aspect.x / ret.video.aspect.y));\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Save pixel ratio for output size calculation\n\t\t\tif (pixel.length > 0) {\n\t\t\t\tret.video.pixelString = pixel[1];\n\t\t\t\tvar pixelValue = pixel[1].split(\":\");\n\t\t\t\tret.video.pixel = parseFloat((parseInt(pixelValue[0], 10) / parseInt(pixelValue[1], 10)));\n\t\t\t} else {\n\t\t\t\tif (ret.video.resolution.w !== 0) {\n\t\t\t\t\tret.video.pixelString = '1:1';\n\t\t\t\t\tret.video.pixel = 1;\n\t\t\t\t} else {\n\t\t\t\t\tret.video.pixelString = '';\n\t\t\t\t\tret.video.pixel = 0.0;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Correct video.resolution when pixel aspectratio is not 1\n\t\t\tif (ret.video.pixel !== 1 || ret.video.pixel !== 0) {\n\t\t\t\tif( ret.video.pixel > 1 ) {\n\t\t\t\t\tret.video.resolutionSquare.w = parseInt(ret.video.resolution.w * ret.video.pixel, 10);\n\t\t\t\t\tret.video.resolutionSquare.h = ret.video.resolution.h;\n\t\t\t\t} else {\n\t\t\t\t\tret.video.resolutionSquare.w = ret.video.resolution.w;\n\t\t\t\t\tret.video.resolutionSquare.h = parseInt(ret.video.resolution.h / ret.video.pixel, 10);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Returns the list of supported formats\n\t\t\tdeferred.resolve(ret);\n\t\t});\n\t\t// Return 'promise' instance \n\t\treturn deferred.promise;\n\t}\n\t\n\t/**\n\t * Get the info about ffmpeg's codec and about file\n\t */\n\tvar _getInformation = function (fileInput, settings) {\n\t\tvar deferreds = [];\n\t\t// Add promise\n\t\tdeferreds.push(_ffmpegInfoConfiguration(settings));\n\t\tdeferreds.push(_videoInfo(fileInput, settings));\n\t\t// Return defer\n\t\treturn when.all(deferreds);\n\t}\n\n\tvar __constructor = function (args) {\n\t\t// Check if exist at least one option\n\t\tif (args.length == 0 || args[0] == undefined)\n\t\t\tthrow errors.renderError('empty_input_filepath');\n\t\t// Check if first argument is a string\n\t\tif (typeof args[0] != 'string')\n\t\t\tthrow errors.renderError('input_filepath_must_be_string');\n\t\t// Get the input filepath\n\t\tvar inputFilepath = args[0];\n\t\t// Check if file exist\n\t\tif (!fs.existsSync(inputFilepath))\n\t\t\tthrow errors.renderError('fileinput_not_exist');\n\t\t\n\t\t// New instance of the base configuration\n\t\tvar settings = new configs();\n\t\t// Callback to call\n\t\tvar callback = null;\n\t\t\n\t\t// Scan all arguments\n\t\tfor (var i = 1; i < args.length; i++) {\n\t\t\t// Check the type of variable\n\t\t\tswitch (typeof args[i]) {\n\t\t\t\tcase 'object' :\n\t\t\t\t\tutils.mergeObject(settings, args[i]);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'function' :\n\t\t\t\t\tcallback = args[i];\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Building the value for return value. Check if the callback is not a function. In this case will created a new instance of the deferred class\n\t\tvar deferred = typeof callback != 'function' ? when.defer() : { promise : null };\n\t\t\n\t\twhen(_getInformation(inputFilepath, settings), function (data) {\n\t\t\t// Check if the callback is a function\n\t\t\tif (typeof callback == 'function') {\n\t\t\t\t// Call the callback function e return the new instance of 'video' class\n\t\t\t\tcallback(null, new video(inputFilepath, settings, data[0], data[1]));\n\t\t\t} else {\n\t\t\t\t// Positive response\n\t\t\t\tdeferred.resolve(new video(inputFilepath, settings, data[0], data[1]));\n\t\t\t}\n\t\t}, function (error) {\n\t\t\t// Check if the callback is a function\n\t\t\tif (typeof callback == 'function') {\n\t\t\t\t// Call the callback function e return the error found\n\t\t\t\tcallback(error, null);\n\t\t\t} else {\n\t\t\t\t// Negative response\n\t\t\t\tdeferred.reject(error);\n\t\t\t}\n\t\t});\n\t\t\n\t\t// Return a possible promise instance\n\t\treturn deferred.promise;\n\t}\n\n\treturn __constructor.call(this, arguments);\n};\n\nmodule.exports = ffmpeg;","/home/travis/build/npmtest/node-npmtest-ffmpeg/node_modules/ffmpeg/lib/errors.js":"var util = require('util');\n\n// Error list with code and message\nvar list = {\n\t'empty_input_filepath'\t\t\t\t\t\t\t: { 'code' : 100, 'msg' : 'The input file path can not be empty' }\n  , 'input_filepath_must_be_string'\t\t\t\t\t: { 'code' : 101, 'msg' : 'The input file path must be a string' }\n  , 'invalid_option_name'\t\t\t\t\t\t\t: { 'code' : 102, 'msg' : 'The option \"%s\" is invalid. Check the list of available options' }\n  , 'fileinput_not_exist'\t\t\t\t\t\t\t: { 'code' : 103, 'msg' : 'The input file does not exist' }\n  , 'format_not_supported'\t\t\t\t\t\t\t: { 'code' : 104, 'msg' : 'The format \"$s\" is not supported by the version of ffmpeg' }\n  , 'audio_channel_is_invalid'\t\t\t\t\t\t: { 'code' : 105, 'msg' : 'The audio channel \"$s\" is not valid' }\n  , 'mkdir'\t\t\t\t\t\t\t\t\t\t\t: { 'code' : 106, 'msg' : 'Error occurred during creation folder: $s' }\n  , 'extract_frame_invalid_everyN_options'\t\t\t: { 'code' : 107, 'msg' : 'You can specify only one option between everyNFrames and everyNSeconds' }\n  , 'invalid_watermark'\t\t\t\t\t\t\t\t: { 'code' : 108, 'msg' : 'The watermark \"%s\" does not exists' }\n  , 'invalid_watermark_position'\t\t\t\t\t: { 'code' : 109, 'msg' : 'Invalid watermark position \"%s\"' }\n  , 'size_format'\t\t\t\t\t\t\t\t\t: { 'code' : 110, 'msg' : 'The format \"%s\" not supported by the function \"setSize\"' }\n  , 'resolution_square_not_defined'\t\t\t\t\t: { 'code' : 111, 'msg' : 'The resolution for pixel aspect ratio is not defined' }\n  , 'command_already_exists'\t\t\t\t\t\t: { 'code' : 112, 'msg' : 'The command \"%s\" already exists' }\n  , 'codec_not_supported'\t\t\t\t\t\t\t: { 'code' : 113, 'msg' : 'The codec \"$s\" is not supported by the version of ffmpeg' }\n}\n\n/**\n * Return the error by the codename\n */\nvar renderError = function (codeName) {\n\t// Get the error object by the codename\n\tvar params = [list[codeName].msg];\n\t// Get the possible arguments\n\tif (arguments.length > 1)\n\t\tparams = params.concat(Array.prototype.slice.call(arguments, 1));\n\t// Call the function for replace the letter '%s' with the found arguments\n\treturn { 'code' : list[codeName].code, 'msg' : util.format.apply(this, params) };\n}\n\nmodule.exports.list = list;\nmodule.exports.renderError = renderError;","/home/travis/build/npmtest/node-npmtest-ffmpeg/node_modules/ffmpeg/lib/utils.js":"var exec\t= require('child_process').exec\n  , fs\t\t= require('fs')\n  , path\t= require('path');\n\nvar errors\t= require('./errors');\n\n/**\n * Exec the list of commands and call the callback function at the end of the process\n */\nmodule.exports.exec = function (commands, settings, callback) {\n\t// Create final command line\n\tvar finalCommand = commands.join(\" \");\n\t// Create the timeoutId for stop the timeout at the end the process\n\tvar timeoutID = null;\n\t// Exec the command\n\tvar process = exec(finalCommand, settings, function (error, stdout, stderr) {\n\t\t// Clear timeout if 'timeoutID' are setted\n\t\tif (timeoutID !== null) clearTimeout(timeoutID);\n\t\t// Call the callback function\n\t\tcallback(error, stdout, stderr);\n\t});\n\t// Verify if the timeout are setting\n\tif (settings.timeout > 0) {\n\t\t// Set the timeout\n\t\ttimeoutID = setTimeout(function () {\n\t\t\tprocess.kill();\n\t\t}, 100);\t\t\n\t}\n}\n\n/**\n * Check if object is empty\n */\nmodule.exports.isEmptyObj = function (obj) {\n\t// Scan all properties\n    for(var prop in obj)\n\t\t// Check if obj has a property\n        if(obj.hasOwnProperty(prop))\n\t\t\t// The object is not empty\n            return false;\n\t// The object is empty\n    return true;\n}\n\n/**\n * Merge obj1 into obj\n */\nmodule.exports.mergeObject = function (obj, obj1) {\n\t// Check if there are options set\n\tif (!module.exports.isEmptyObj(obj1)) {\n\t\t// Scan all settings\n\t\tfor (var key in obj1) {\n\t\t\t// Check if the option is valid\n\t\t\tif (!obj.hasOwnProperty(key))\n\t\t\t\tthrow errors.renderError('invalid_option_name', key);\n\t\t\t// Set new option value\n\t\t\tobj[key] = obj1[key];\n\t\t}\n\t}\n}\n\n/**\n * Calculate the duration in seconds from the string retrieved by the ffmpeg info\n */\nmodule.exports.durationToSeconds = function(duration) {\n\tvar parts = duration.substr(0,8).split(':');\n\treturn parseInt(parts[0], 10) * 3600 + parseInt(parts[1], 10) * 60 + parseInt(parts[2], 10);\n};\n\n/**\n * Calculate the greatest common divisor\n */\nmodule.exports.gcd = function (a, b) { \n\tif (b === 0) return a;\n\treturn module.exports.gcd(b, a % b);\n}\n\n/**\n * Offers functionality similar to mkdir -p\n */\nmodule.exports.mkdir = function (dirpath, mode, callback, position) {\n\t// Split all directories\n    var parts = path.normalize(dirpath).split('/');\n\t// If the first part is empty then remove this part\n\tif (parts[0] == \"\") \n\t\tparts = parts.slice(1);\n\t\n\t// Set the initial configuration\n    mode = mode || 0777;\n    position = position || 0;\n\t\n\t// Check se current position is greater than the list of folders\n\tif (position > parts.length) {\n\t\t// If isset the callback then it will be invoked\n\t\tif (callback) \n\t\t\tcallback();\n\t\t// Exit and return a positive value\n\t\treturn true;\n\t}\n\n\t// Build the directory path\n\tvar directory = (dirpath.charAt(0) == '/' ? '/' : '') + parts.slice(0, position + 1).join('/');\n\n\t// Check if directory exists\n\tif (fs.existsSync(directory)) {\n\t\tmodule.exports.mkdir(dirpath, mode, callback, position + 1);\n\t} else {\n\t\tif (fs.mkdirSync(directory, mode)) {\n\t\t\t// If isset the callback then it will be invoked\n\t\t\tif (callback) \n\t\t\t\tcallback(errors.renderError('mkdir', directory));\n\t\t\t// Send the new exception\n\t\t\tthrow errors.renderError('mkdir', directory);\n\t\t} else {\n\t\t\tmodule.exports.mkdir(dirpath, mode, callback, position + 1);\n\t\t}\n\t}\n}\n\n/**\n * Check if a value is present inside an array\n */\nmodule.exports.in_array = function (value, array) {\n\t// Scan all element\n\tfor (var i in array)\n\t\t// Check if value exists\n\t\tif (array[i] == value)\n\t\t\t// Return the position of value\n\t\t\treturn i;\n\t// The value not exists\n\treturn false;\n}","/home/travis/build/npmtest/node-npmtest-ffmpeg/node_modules/ffmpeg/lib/configs.js":"/**\n * Basic configuration\n */\nmodule.exports = function () {\n\tthis.encoding\t= 'utf8';\n\tthis.timeout\t= 0;\n\tthis.maxBuffer\t= 200 * 1024\n}","/home/travis/build/npmtest/node-npmtest-ffmpeg/node_modules/ffmpeg/lib/video.js":"var fs\t\t\t= require('fs')\n  , path\t\t= require('path')\n  , when\t\t= require('when');\n\nvar errors\t\t= require('./errors')\n  , presets\t\t= require('./presets')\n  , utils\t\t= require('./utils');\n\nmodule.exports = function (filePath, settings, infoConfiguration, infoFile) {\n\t\n\t// Public info about file and ffmpeg configuration\n\tthis.file_path\t\t\t\t= filePath;\n\tthis.info_configuration\t\t= infoConfiguration;\n\tthis.metadata\t\t\t\t= infoFile;\n\t\n\t// Commands for building the ffmpeg string conversion\n\tvar commands\t\t= new Array()\n\t  , inputs\t\t\t= new Array()\n\t  , filtersComlpex\t= new Array()\n\t  , output\t\t\t= null;\n\t\n\t// List of options generated from setting functions\n\tvar options\t\t\t= new Object();\n\t\n\t/*****************************************/\n\t/* FUNCTION FOR FILL THE COMMANDS OBJECT */\n\t/*****************************************/\n\t\n\t/**\n\t * Add a command to be bundled into the ffmpeg command call\n\t */\n\tthis.addCommand = function (command, argument) {\n\t\t// Check if exists the current command\n\t\tif (utils.in_array(command, commands) === false) {\n\t\t\t// Add the new command\n\t\t\tcommands.push(command);\n\t\t\t// Add the argument to new command\n\t\t\tif (argument != undefined)\n\t\t\t\tcommands.push(argument);\n\t\t} else \n\t\t\tthrow errors.renderError('command_already_exists', command);\n\t}\n\t\n\t/**\n\t * Add an input stream\n\t */\n\tthis.addInput = function (argument) {\n\t\tinputs.push(argument);\n\t}\n\t\n\t/**\n\t * Add a filter complex\n\t */\n\tthis.addFilterComplex = function (argument) {\n\t\tfiltersComlpex.push(argument);\n\t}\n\t\n\t/**\n\t * Set the output path\n\t */\n\tvar setOutput = function (path) {\n\t\toutput = path;\n\t}\n\t\n\t/*********************/\n\t/* SETTING FUNCTIONS */\n\t/*********************/\n\t\n\t/**\n\t * Disables audio encoding\n\t */\n\tthis.setDisableAudio = function () {\n\t\tif (options.audio == undefined)\n\t\t\toptions.audio = new Object();\n\t\t// Set the new option\n\t\toptions.audio.disabled = true;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Disables video encoding\n\t */\n\tthis.setDisableVideo = function () {\n\t\tif (options.video == undefined)\n\t\t\toptions.video = new Object();\n\t\t// Set the new option\n\t\toptions.video.disabled = true;\n\t\treturn this;\n\t}\n\t\n\t/**\n\t * Sets the new video format\n\t */\n\tthis.setVideoFormat = function (format) {\n\t\t// Check if the format is supported by ffmpeg version\n\t\tif (this.info_configuration.encode.indexOf(format) != -1) {\n\t\t\tif (options.video == undefined)\n\t\t\t\toptions.video = new Object();\n\t\t\t// Set the new option\n\t\t\toptions.video.format = format;\n\t\t\treturn this;\n\t\t} else \n\t\t\tthrow errors.renderError('format_not_supported', format);\n\t}\n\t\n\t/**\n\t * Sets the new audio codec\n\t */\n\tthis.setVideoCodec = function (codec) {\n\t\t// Check if the codec is supported by ffmpeg version\n\t\tif (this.info_configuration.encode.indexOf(codec) != -1) {\n\t\t\tif (options.video == undefined)\n\t\t\t\toptions.video = new Object();\n\t\t\t// Set the new option\n\t\t\toptions.video.codec = codec;\n\t\t\treturn this;\n\t\t} else \n\t\t\tthrow errors.renderError('codec_not_supported', codec);\n\t}\n\t\n\t/**\n\t * Sets the video bitrate\n\t */\n\tthis.setVideoBitRate = function (bitrate) {\n\t\tif (options.video == undefined)\n\t\t\toptions.video = new Object();\n\t\t// Set the new option\n\t\toptions.video.bitrate = bitrate;\n\t\treturn this;\n\t}\n\t\n\t/**\n\t * Sets the framerate of the video\n\t */\n\tthis.setVideoFrameRate = function (framerate) {\n\t\tif (options.video == undefined)\n\t\t\toptions.video = new Object();\n\t\t// Set the new option\n\t\toptions.video.framerate = framerate;\n\t\treturn this;\t\t\n\t}\n\t\n\t/**\n\t * Sets the start time\n\t */\n\tthis.setVideoStartTime = function (time) {\n\t\tif (options.video == undefined)\n\t\t\toptions.video = new Object();\n\t\t\n\t\t// Check if time is a string that contain: hours, minutes and seconds\n\t\tif (isNaN(time) && /([0-9]+):([0-9]{2}):([0-9]{2})/.exec(time)) {\n\t\t\ttime = utils.durationToSeconds(time);\t\t\t\n\t\t} else if (!isNaN(time) && parseInt(time) == time) {\n\t\t\ttime = parseInt(time, 10);\t\t\t\n\t\t} else {\n\t\t\ttime = 0;\t\t\t\n\t\t}\n\n\t\t// Set the new option\n\t\toptions.video.startTime = time;\n\t\treturn this;\n\t}\n\t\n\t/**\n\t * Sets the duration\n\t */\n\tthis.setVideoDuration = function (duration) {\n\t\tif (options.video == undefined)\n\t\t\toptions.video = new Object();\n\t\t\n\t\t// Check if duration is a string that contain: hours, minutes and seconds\n\t\tif (isNaN(duration) && /([0-9]+):([0-9]{2}):([0-9]{2})/.exec(duration)) {\n\t\t\tduration = utils.durationToSeconds(duration);\n\t\t} else if (!isNaN(duration) && parseInt(duration) == duration) {\n\t\t\tduration = parseInt(duration, 10);\t\t\t\n\t\t} else {\n\t\t\tduration = 0;\n\t\t}\n\n\t\t// Set the new option\n\t\toptions.video.duration = duration;\n\t\treturn this;\n\t}\n\t\n\t/**\n\t * Sets the new aspetc ratio\n\t */\n\tthis.setVideoAspectRatio = function (aspect) {\n\t\t// Check if aspect is a string\n\t\tif (isNaN(aspect)) {\n\t\t\t// Check if aspet is string xx:xx\n\t\t\tif (/([0-9]+):([0-9]+)/.exec(aspect)) {\n\t\t\t\tvar check = /([0-9]+):([0-9]+)/.exec(aspect);\n\t\t\t\taspect = parseFloat((check[1] / check[2]));\n\t\t\t} else {\n\t\t\t\taspect = this.metadata.video.aspect.value;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (options.video == undefined)\n\t\t\toptions.video = new Object();\n\t\t// Set the new option\n\t\toptions.video.aspect = aspect;\n\t\treturn this;\n\t}\n\t\n\t/**\n\t * Set the size of the video\n\t */\n\tthis.setVideoSize = function (size, keepPixelAspectRatio, keepAspectRatio, paddingColor) {\n\t\tif (options.video == undefined)\n\t\t\toptions.video = new Object();\n\t\t// Set the new option\n\t\toptions.video.size = size;\n\t\toptions.video.keepPixelAspectRatio = keepPixelAspectRatio;\n\t\toptions.video.keepAspectRatio = keepAspectRatio;\n\t\toptions.video.paddingColor = paddingColor;\n\t\treturn this;\n\t}\n\t\n\t/**\n\t * Sets the new audio codec\n\t */\n\tthis.setAudioCodec = function (codec) {\n\t\t// Check if the codec is supported by ffmpeg version\n\t\tif (this.info_configuration.encode.indexOf(codec) != -1) {\n\t\t\t// Check if codec is equal 'MP3' and check if the version of ffmpeg support the libmp3lame function\n\t\t\tif (codec == 'mp3' && this.info_configuration.modules.indexOf('libmp3lame') != -1)\n\t\t\t\tcodec = 'libmp3lame';\n\t\t\t\n\t\t\tif (options.audio == undefined)\n\t\t\t\toptions.audio = new Object();\n\t\t\t// Set the new option\n\t\t\toptions.audio.codec = codec;\n\t\t\treturn this;\n\t\t} else \n\t\t\tthrow errors.renderError('codec_not_supported', codec);\n\t}\n\t\n\t/**\n\t * Sets the audio sample frequency for audio outputs\n\t */\n\tthis.setAudioFrequency = function (frequency) {\n\t\tif (options.audio == undefined)\n\t\t\toptions.audio = new Object();\n\t\t// Set the new option\n\t\toptions.audio.frequency = frequency;\n\t\treturn this;\n\t}\n\t\n\t/**\n\t * Sets the number of audio channels\n\t */\n\tthis.setAudioChannels = function (channel) {\n\t\t// Check if the channel value is valid\n\t\tif (presets.audio_channel.stereo == channel || presets.audio_channel.mono == channel) {\n\t\t\tif (options.audio == undefined)\n\t\t\t\toptions.audio = new Object();\n\t\t\t// Set the new option\n\t\t\toptions.audio.channel = channel;\n\t\t\treturn this;\t\t\t\n\t\t} else \n\t\t\tthrow errors.renderError('audio_channel_is_invalid', channel);\n\t}\n\t\n\t/**\n\t * Sets the audio bitrate\n\t */\n\tthis.setAudioBitRate = function (bitrate) {\n\t\tif (options.audio == undefined)\n\t\t\toptions.audio = new Object();\n\t\t// Set the new option\n\t\toptions.audio.bitrate = bitrate;\n\t\treturn this;\n\t}\n\t\n\t/**\n\t * Sets the audio quality\n\t */\n\tthis.setAudioQuality = function (quality) {\n\t\tif (options.audio == undefined)\n\t\t\toptions.audio = new Object();\n\t\t// Set the new option\n\t\toptions.audio.quality = quality;\n\t\treturn this;\n\t}\n\t\n\t/**\n\t * Sets the watermark\n\t */\n\tthis.setWatermark = function (watermarkPath, settings) {\n\t\t// Base settings\n\t\tvar baseSettings = {\n\t\t\tposition\t\t: \"SW\"\t\t// Position: NE NC NW SE SC SW C CE CW\n\t\t  , margin_nord\t\t: null\t\t// Margin nord\n\t\t  , margin_sud\t\t: null\t\t// Margin sud\n\t\t  , margin_east\t\t: null\t\t// Margin east\n\t\t  , margin_west\t\t: null\t\t// Margin west\n\t\t};\n\t\t\n\t\t// Check if watermark exists\n\t\tif (!fs.existsSync(watermarkPath))\n\t\t\tthrow errors.renderError('invalid_watermark', watermarkPath);\n\t\t\n\t\t// Check if the settings are specified\n\t\tif (settings != null)\n\t\t\tutils.mergeObject(baseSettings, settings);\n\t\t\n\t\t// Check if position is valid\n\t\tif (baseSettings.position == null || utils.in_array(baseSettings.position, ['NE','NC','NW','SE','SC','SW','C','CE','CW']) === false)\n\t\t\tthrow errors.renderError('invalid_watermark_position', baseSettings.position);\n\t\t\n\t\t// Check if margins are valid\n\t\t\n\t\tif (baseSettings.margin_nord == null || isNaN(baseSettings.margin_nord))\n\t\t\tbaseSettings.margin_nord = 0;\n\t\tif (baseSettings.margin_sud == null || isNaN(baseSettings.margin_sud))\n\t\t\tbaseSettings.margin_sud = 0;\n\t\tif (baseSettings.margin_east == null || isNaN(baseSettings.margin_east))\n\t\t\tbaseSettings.margin_east = 0;\n\t\tif (baseSettings.margin_west == null || isNaN(baseSettings.margin_west))\n\t\t\tbaseSettings.margin_west = 0;\n\t\t\n\t\tvar overlay = '';\n\t\t\n\t\tvar getSing = function (val, inverse) {\n\t\t\treturn (val > 0 ? (inverse ? '-' : '+') : (inverse ? '+' : '-')).toString() + Math.abs(val).toString();\n\t\t}\n\t\t\n\t\tvar getHorizontalMargins = function (east, west) {\n\t\t\treturn getSing(east, false).toString() + getSing(west, true).toString();\n\t\t}\n\t\t\n\t\tvar getVerticalMargins = function (nord, sud) {\n\t\t\treturn getSing(nord, false).toString() + getSing(sud, true).toString();\n\t\t}\n\t\t\n\t\t// Calculate formula\t\t\n\t\tswitch (baseSettings.position) {\n\t\t\tcase 'NE':\n\t\t\t\toverlay = '0' + getHorizontalMargins(baseSettings.margin_east, baseSettings.margin_west) + ':0' + getVerticalMargins(baseSettings.margin_nord, baseSettings.margin_sud);\n\t\t\t\tbreak;\n\t\t\tcase 'NC':\n\t\t\t\toverlay = 'main_w/2-overlay_w/2' + getHorizontalMargins(baseSettings.margin_east, baseSettings.margin_west) + ':0' + getVerticalMargins(baseSettings.margin_nord, baseSettings.margin_sud);\n\t\t\t\tbreak;\n\t\t\tcase 'NW':\n\t\t\t\toverlay = 'main_w-overlay_w' + getHorizontalMargins(baseSettings.margin_east, baseSettings.margin_west) + ':0' + getVerticalMargins(baseSettings.margin_nord, baseSettings.margin_sud);\n\t\t\t\tbreak;\n\t\t\tcase 'SE':\n\t\t\t\toverlay = '0' + getHorizontalMargins(baseSettings.margin_east, baseSettings.margin_west) + ':main_h-overlay_h' + getVerticalMargins(baseSettings.margin_nord, baseSettings.margin_sud);\n\t\t\t\tbreak;\n\t\t\tcase 'SC':\n\t\t\t\toverlay = 'main_w/2-overlay_w/2' + getHorizontalMargins(baseSettings.margin_east, baseSettings.margin_west) + ':main_h-overlay_h' + getVerticalMargins(baseSettings.margin_nord, baseSettings.margin_sud);\n\t\t\t\tbreak;\n\t\t\tcase 'SW':\n\t\t\t\toverlay = 'main_w-overlay_w' + getHorizontalMargins(baseSettings.margin_east, baseSettings.margin_west) + ':main_h-overlay_h' + getVerticalMargins(baseSettings.margin_nord, baseSettings.margin_sud);\n\t\t\t\tbreak;\n\t\t\tcase 'CE':\n\t\t\t\toverlay = '0' + getHorizontalMargins(baseSettings.margin_east, baseSettings.margin_west) + ':main_h/2-overlay_h/2' + getVerticalMargins(baseSettings.margin_nord, baseSettings.margin_sud);\n\t\t\t\tbreak;\n\t\t\tcase 'C':\n\t\t\t\toverlay = 'main_w/2-overlay_w/2' + getHorizontalMargins(baseSettings.margin_east, baseSettings.margin_west) + ':main_h/2-overlay_h/2' + getVerticalMargins(baseSettings.margin_nord, baseSettings.margin_sud);\n\t\t\t\tbreak;\n\t\t\tcase 'CW':\n\t\t\t\toverlay = 'main_w-overlay_w' + getHorizontalMargins(baseSettings.margin_east, baseSettings.margin_west) + ':main_h/2-overlay_h/2' + getVerticalMargins(baseSettings.margin_nord, baseSettings.margin_sud);\n\t\t\t\tbreak;\n\t\t}\n\t\t\n\t\t// Check if the call comes from internal function\n\t\tif (arguments[2] == undefined || arguments[2] == null) {\n\t\t\tif (options.video == undefined)\n\t\t\t\toptions.video = new Object();\n\t\t\t// Set the new option\n\t\t\toptions.video.watermark = { path : watermarkPath, overlay : overlay };\n\t\t\treturn this;\n\t\t} else if (arguments[2] != undefined && arguments[2] === true) {\n\t\t\tthis.addInput(watermarkPath);\n\t\t\tthis.addFilterComplex('overlay=' + overlay);\n\t\t}\n\t}\n\t\n\t/**\n\t * Save all set commands\n\t */\n\tthis.save = function (destionationFileName, callback) {\n\t\t// Check if the 'video' is present in the options\n\t\tif (options.hasOwnProperty('video')) {\n\t\t\t// Check if video is disabled\n\t\t\tif (options.video.hasOwnProperty('disabled')) {\n\t\t\t\tthis.addCommand('-vn');\t\t\t\t\n\t\t\t} else {\n\t\t\t\t// Check all video property\n\t\t\t\tif (options.video.hasOwnProperty('format'))\n\t\t\t\t\tthis.addCommand('-f', options.video.format);\n\t\t\t\tif (options.video.hasOwnProperty('codec'))\n\t\t\t\t\tthis.addCommand('-vcodec', options.video.codec);\n\t\t\t\tif (options.video.hasOwnProperty('bitrate'))\n\t\t\t\t\tthis.addCommand('-b', parseInt(options.video.bitrate, 10) + 'kb');\n\t\t\t\tif (options.video.hasOwnProperty('framerate'))\n\t\t\t\t\tthis.addCommand('-r', parseInt(options.video.framerate, 10));\n\t\t\t\tif (options.video.hasOwnProperty('startTime'))\n\t\t\t\t\tthis.addCommand('-ss', parseInt(options.video.startTime, 10));\n\t\t\t\tif (options.video.hasOwnProperty('duration'))\n\t\t\t\t\tthis.addCommand('-t', parseInt(options.video.duration, 10));\n\t\t\t\t\n\t\t\t\tif (options.video.hasOwnProperty('watermark')) {\n\t\t\t\t\tthis.addInput(options.video.watermark.path);\n\t\t\t\t\tthis.addFilterComplex('overlay=' + options.video.watermark.overlay);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Check if the video should be scaled\n\t\t\t\tif (options.video.hasOwnProperty('size')) {\n\t\t\t\t\tvar newDimension = _calculateNewDimension.call(this);\n\t\t\t\t\t\n\t\t\t\t\tif (newDimension.aspect != null) {\n\t\t\t\t\t\tthis.addFilterComplex('scale=iw*sar:ih, pad=max(iw\\\\,ih*(' + newDimension.aspect.x + '/' + newDimension.aspect.y + ')):ow/(' + newDimension.aspect.x + '/' + newDimension.aspect.y + '):(ow-iw)/2:(oh-ih)/2' + (options.video.paddingColor != null ? ':' + options.video.paddingColor : ''));\n\t\t\t\t\t\tthis.addCommand('-aspect', newDimension.aspect.string);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tthis.addCommand('-s', newDimension.width + 'x' + newDimension.height);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Check if the 'audio' is present in the options\n\t\tif (options.hasOwnProperty('audio')) {\n\t\t\t// Check if audio is disabled\n\t\t\tif (options.audio.hasOwnProperty('disabled')) {\n\t\t\t\tthis.addCommand('-an');\t\t\t\t\n\t\t\t} else {\n\t\t\t\t// Check all audio property\n\t\t\t\tif (options.audio.hasOwnProperty('codec'))\n\t\t\t\t\tthis.addCommand('-acodec', options.audio.codec);\n\t\t\t\tif (options.audio.hasOwnProperty('frequency'))\n\t\t\t\t\tthis.addCommand('-ar', parseInt(options.audio.frequency));\n\t\t\t\tif (options.audio.hasOwnProperty('channel'))\n\t\t\t\t\tthis.addCommand('-ac', options.audio.channel);\n\t\t\t\tif (options.audio.hasOwnProperty('quality'))\n\t\t\t\t\tthis.addCommand('-aq', options.audio.quality);\n\t\t\t\tif (options.audio.hasOwnProperty('bitrate'))\n\t\t\t\t\tthis.addCommand('-ab', parseInt(options.audio.bitrate, 10) + 'k');\n\t\t\t}\n\t\t}\n\t\t\n\t\tsetOutput(destionationFileName);\n\t\t\n\t\treturn execCommand.call(this, callback);\n\t}\n\t\n\t/*********************/\n\t/* INTERNAL FUNCTION */\n\t/*********************/\n\t\n\t/**\n\t * Reset the list of commands\n\t */\n\tvar resetCommands = function (self) {\n\t\tcommands\t\t= new Array()\n\t\tinputs\t\t\t= [self.file_path];\n\t\tfiltersComlpex\t= new Array();\n\t\toutput\t\t\t= null;\n\t\toptions\t\t\t= new Object();\n\t}\n\n\t/**\n\t * Calculate width, height and aspect ratio by the new dimension data\n\t */\n\tvar _calculateNewDimension = function () {\n\t\t// Check if keepPixelAspectRatio is undefined\n\t\tvar keepPixelAspectRatio = typeof options.video.keepPixelAspectRatio != 'boolean' ? false : options.video.keepPixelAspectRatio;\n\t\t// Check if keepAspectRatio is undefined\n\t\tvar keepAspectRatio = typeof options.video.keepAspectRatio != 'boolean' ? false : options.video.keepAspectRatio;\n\t\t\n\t\t// Resolution to be taken as a reference\n\t\tvar referrerResolution = this.metadata.video.resolution;\n\t\t// Check if is need keep pixel aspect ratio\n\t\tif (keepPixelAspectRatio) {\n\t\t\t// Check if exists resolution for pixel aspect ratio\n\t\t\tif (utils.isEmptyObj(this.metadata.video.resolutionSquare))\n\t\t\t\tthrow errors.renderError('resolution_square_not_defined');\n\t\t\t\n\t\t\t// Apply the resolutionSquare\n\t\t\treferrerResolution = this.metadata.video.resolutionSquare;\n\t\t}\n\t\t\n\t\t// Final data\n\t\tvar width\t= null\n\t\t  , height\t= null\n\t\t  , aspect\t= null;\n\n\t\t// Regex to check which type of dimension was specified\n\t\tvar fixedWidth\t\t= /([0-9]+)x\\?/.exec(options.video.size)\n\t\t  , fixedHeight\t\t= /\\?x([0-9]+)/.exec(options.video.size)\n\t\t  , percentage\t\t= /([0-9]{1,2})%/.exec(options.video.size)\n\t\t  , classicSize\t\t= /([0-9]+)x([0-9]+)/.exec(options.video.size);\n\t\t  \n\t\tif (fixedWidth) {\n\t\t\t// Set the width dimension\n\t\t\twidth = parseInt(fixedWidth[1], 10);\t\t\t\n\t\t\t// Check if the video has the aspect ratio setted\n\t\t\tif (!utils.isEmptyObj(this.metadata.video.aspect)) {\n\t\t\t\theight = Math.round((width / this.metadata.video.aspect.x) * this.metadata.video.aspect.y);\n\t\t\t} else {\n\t\t\t\t// Calculte the new height\n\t\t\t\theight = Math.round(referrerResolution.h / (referrerResolution.w / parseInt(fixedWidth[1], 10)));\n\t\t\t}\n\t\t} else if (fixedHeight) {\n\t\t\t// Set the width dimension\n\t\t\theight = parseInt(fixedHeight[1], 10);\t\t\t\n\t\t\t// Check if the video has the aspect ratio setted\n\t\t\tif (!utils.isEmptyObj(this.metadata.video.aspect)) {\n\t\t\t\twidth = Math.round((height / this.metadata.video.aspect.y) * this.metadata.video.aspect.x);\n\t\t\t} else {\n\t\t\t\t// Calculte the new width\n\t\t\t\twidth = Math.round(referrerResolution.w / (referrerResolution.h / parseInt(fixedHeight[1], 10)));\n\t\t\t}\t\t\t\n\t\t} else if (percentage) {\n\t\t\t// Calculte the ratio from percentage\n\t\t\tvar ratio = parseInt(percentage[1], 10) / 100;\n\t\t\t// Calculate the new dimensions\n\t\t\twidth = Math.round(referrerResolution.w * ratio);\n\t\t\theight = Math.round(referrerResolution.h * ratio);\n\t\t} else if (classicSize) {\n\t\t\twidth = parseInt(classicSize[1], 10);\n\t\t\theight = parseInt(classicSize[2], 10);\n\t\t} else \n\t\t\tthrow errors.renderError('size_format', options.video.size);\n\t\t\n\t\t// If the width or height are not multiples of 2 will be decremented by one unit\n\t\tif (width % 2 != 0) width -= 1;\n\t\tif (height % 2 != 0) height -= 1;\n\t\t\n\t\tif (keepAspectRatio) {\n\t\t\t// Calculate the new aspect ratio\n\t\t\tvar gcdValue\t= utils.gcd(width, height);\n\t\t\t\n\t\t\taspect = new Object();\n\t\t\taspect.x = width / gcdValue;\n\t\t\taspect.y = height / gcdValue;\n\t\t\taspect.string = aspect.x + ':' + aspect.y;\n\t\t}\n\t\t\n\t\treturn { width : width, height : height, aspect : aspect };\n\t}\n\t\n\t/**\n\t * Executing the commands list\n\t */\n\tvar execCommand = function (callback, folder) {\n\t\t// Checking if folder is defined\n\t\tvar onlyDestinationFile = folder != undefined ? false : true;\n\t\t// Building the value for return value. Check if the callback is not a function. In this case will created a new instance of the deferred class\n\t\tvar deferred = typeof callback != 'function' ? when.defer() : { promise : null };\n\t\t// Create a copy of the commands list\n\t\tvar finalCommands = ['ffmpeg -i']\n\t\t\t.concat(inputs.join(' -i '))\n\t\t\t.concat(commands.join(' '))\n\t\t\t.concat(filtersComlpex.length > 0 ? ['-filter_complex \"'].concat(filtersComlpex.join(', ')).join('') + '\"' : [])\n\t\t\t.concat([output]);\n\t\t// Reset commands\n\t\tresetCommands(this);\n\t\t// Execute the commands from the list\n\t\tutils.exec(finalCommands, settings, function (error, stdout, stderr) {\n\t\t\t// Building the result\n\t\t\tvar result = null;\n\t\t\tif (!error) {\n\t\t\t\t// Check if show only destination filename or the complete file list\n\t\t\t\tif (onlyDestinationFile) {\n\t\t\t\t\tresult = finalCommands[finalCommands.length-1];\n\t\t\t\t} else {\n\t\t\t\t\t// Clean possible \"/\" at the end of the string\n\t\t\t\t\tif (folder.charAt(folder.length-1) == \"/\")\n\t\t\t\t\t\tfolder = folder.substr(0, folder.length-1);\n\t\t\t\t\t// Read file list inside the folder\n\t\t\t\t\tresult = fs.readdirSync(folder);\n\t\t\t\t\t// Scan all file and prepend the folder path\n\t\t\t\t\tfor (var i in result)\n\t\t\t\t\t\tresult[i] = [folder, result[i]].join('/')\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check if the callback is a function\n\t\t\tif (typeof callback == 'function') {\n\t\t\t\t// Call the callback to return the info\n\t\t\t\tcallback(error, result);\n\t\t\t} else {\n\t\t\t\tif (error) {\n\t\t\t\t\t// Negative response\n\t\t\t\t\tdeferred.reject(error);\n\t\t\t\t} else {\n\t\t\t\t\t// Positive response\n\t\t\t\t\tdeferred.resolve(result);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t// Return a possible promise instance\n\t\treturn deferred.promise;\n\t}\n\t\n\t/*******************/\n\t/* PRESET FUNCTION */\n\t/*******************/\n\t\n\t/**\n\t * Extracting sound from a video, and save it as Mp3\n\t */\n\tthis.fnExtractSoundToMP3 = function (destionationFileName, callback) {\n\t\t// Check if file already exists. In this case will remove it\n\t\tif (fs.existsSync(destionationFileName)) \n\t\t\tfs.unlinkSync(destionationFileName);\n\n\t\t// Building the final path\n\t\tvar destinationDirName\t\t= path.dirname(destionationFileName)\n\t\t  , destinationFileNameWE\t= path.basename(destionationFileName, path.extname(destionationFileName)) + '.mp3'\n\t\t  , finalPath\t\t\t\t= path.join(destinationDirName, destinationFileNameWE);\n\t\t\n\t\tresetCommands(this);\n\t\t\n\t\t// Adding commands to the list\n\t\tthis.addCommand('-vn');\n\t\tthis.addCommand('-ar', 44100);\n\t\tthis.addCommand('-ac', 2);\n\t\tthis.addCommand('-ab', 192);\n\t\tthis.addCommand('-f', 'mp3');\n\t\t\n\t\t// Add destination file path to the command list\n\t\tsetOutput(finalPath);\n\t\t\n\t\t// Executing the commands list\n\t\treturn execCommand.call(this, callback);\n\t}\n\t\n\t/**\n\t * Extract frame from video file\n\t */\n\tthis.fnExtractFrameToJPG = function (/* destinationFolder, settings, callback */) {\n\t\t\n\t\tvar destinationFolder\t= null\n\t\t  , newSettings\t\t\t= null\n\t\t  , callback\t\t\t= null;\n\t\t  \n\t\tvar settings = {\n\t\t\tstart_time\t\t\t\t: null\t\t// Start time to recording\n\t\t  , duration_time\t\t\t: null\t\t// Duration of recording\n\t\t  , frame_rate\t\t\t\t: null\t\t// Number of the frames to capture in one second\n\t\t  , size\t\t\t\t\t: null\t\t// Dimension each frame\n\t\t  , number\t\t\t\t\t: null\t\t// Total frame to capture\n\t\t  , every_n_frames\t\t\t: null\t\t// Frame to capture every N frames\n\t\t  , every_n_seconds\t\t\t: null\t\t// Frame to capture every N seconds\n\t\t  , every_n_percentage\t\t: null\t\t// Frame to capture every N percentage range\n\t\t  , keep_pixel_aspect_ratio\t: true\t\t// Mantain the original pixel video aspect ratio\n\t\t  , keep_aspect_ratio\t\t: true\t\t// Mantain the original aspect ratio\n\t\t  , padding_color\t\t\t: 'black'\t// Padding color\n\t\t  , file_name\t\t\t\t: null\t\t// File name\n\t\t};\n\t\t  \n\t\t// Scan all arguments\n\t\tfor (var i in arguments) {\n\t\t\t// Check the type of the argument\n\t\t\tswitch (typeof arguments[i]) {\n\t\t\t\tcase 'string':\n\t\t\t\t\tdestinationFolder = arguments[i];\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\tnewSettings = arguments[i];\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'function':\n\t\t\t\t\tcallback = arguments[i];\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Check if the settings are specified\n\t\tif (newSettings !== null)\n\t\t\tutils.mergeObject(settings, newSettings);\n\n\t\t// Check if 'start_time' is in the format hours:minutes:seconds\n\t\tif (settings.start_time != null) {\n\t\t\tif (/([0-9]+):([0-9]{2}):([0-9]{2})/.exec(settings.start_time))\n\t\t\t\tsettings.start_time = utils.durationToSeconds(settings.start_time);\n\t\t\telse if (!isNaN(settings.start_time))\n\t\t\t\tsettings.start_time = parseInt(settings.start_time, 10);\n\t\t\telse\n\t\t\t\tsettings.start_time = null;\n\t\t}\n\n\t\t// Check if 'duration_time' is in the format hours:minutes:seconds\n\t\tif (settings.duration_time != null) {\n\t\t\tif (/([0-9]+):([0-9]{2}):([0-9]{2})/.exec(settings.duration_time))\n\t\t\t\tsettings.duration_time = utils.durationToSeconds(settings.duration_time);\n\t\t\telse if (!isNaN(settings.duration_time))\n\t\t\t\tsettings.duration_time = parseInt(settings.duration_time, 10);\n\t\t\telse\n\t\t\t\tsettings.duration_time = null;\n\t\t}\n\n\t\t// Check if the value of the framerate is number type\n\t\tif (settings.frame_rate != null && isNaN(settings.frame_rate))\n\t\t\tsettings.frame_rate = null;\n\n\t\t// If the size is not settings then the size of the screenshots is equal to video size\n\t\tif (settings.size == null)\n\t\t\tsettings.size = this.metadata.video.resolution.w + 'x' + this.metadata.video.resolution.h;\n\n\t\t// Check if the value of the 'number frame to capture' is number type\n\t\tif (settings.number != null && isNaN(settings.number))\n\t\t\tsettings.number = null;\n\n\t\tvar every_n_check = 0;\n\n\t\t// Check if the value of the 'every_n_frames' is number type\n\t\tif (settings.every_n_frames != null && isNaN(settings.every_n_frames)) {\n\t\t\tsettings.every_n_frames = null;\n\t\t\tevery_n_check++;\n\t\t}\n\n\t\t// Check if the value of the 'every_n_seconds' is number type\n\t\tif (settings.every_n_seconds != null && isNaN(settings.every_n_seconds)) {\n\t\t\tsettings.every_n_seconds = null;\n\t\t\tevery_n_check++;\n\t\t}\n\n\t\t// Check if the value of the 'every_n_percentage' is number type\n\t\tif (settings.every_n_percentage != null && (isNaN(settings.every_n_percentage) || settings.every_n_percentage > 100)) {\n\t\t\tsettings.every_n_percentage = null;\n\t\t\tevery_n_check++;\n\t\t}\n\t\t\n\t\tif (every_n_check >= 2) {\n\t\t\tif (callback) {\n\t\t\t\tcallback(errors.renderError('extract_frame_invalid_everyN_options'));\n\t\t\t} else {\n\t\t\t\tthrow errors.renderError('extract_frame_invalid_everyN_options');\n\t\t\t}\n\t\t}\t\t\t\n\t\t\n\t\t// If filename is null then his value is equal to original filename\n\t\tif (settings.file_name == null) {\n\t\t\tsettings.file_name = path.basename(this.file_path, path.extname(this.file_path));\n\t\t} else {\n\t\t\t// Retrieve all possible replacements\n\t\t\tvar replacements = settings.file_name.match(/(\\%[a-zA-Z]{1})/g);\n\t\t\t// Check if exists replacements. The scan all replacements and build the final filename\n\t\t\tif (replacements) {\n\t\t\t\tfor (var i in replacements) {\n\t\t\t\t\tswitch (replacements[i]) {\n\t\t\t\t\t\tcase '%t':\n\t\t\t\t\t\t\tsettings.file_name = settings.file_name.replace('%t', new Date().getTime());\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase '%s':\n\t\t\t\t\t\t\tsettings.file_name = settings.file_name.replace('%s', settings.size);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase '%x':\n\t\t\t\t\t\t\tsettings.file_name = settings.file_name.replace('%x', settings.size.split(':')[0]);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase '%y':\n\t\t\t\t\t\t\tsettings.file_name = settings.file_name.replace('%y', settings.size.split(':')[1]);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tsettings.file_name = settings.file_name.replace(replacements[i], '');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// At the filename will added the number of the frame\n\t\tsettings.file_name = path.basename(settings.file_name, path.extname(settings.file_name)) + '_%d.jpg';\n\t\t\n\t\t// Create the directory to save the extracted frames\n\t\tutils.mkdir(destinationFolder, 0777);\n\t\t\n\t\tresetCommands(this);\n\t\t\n\t\t// Adding commands to the list\n\t\tif (settings.startTime)\n\t\t\tthis.addCommand('-ss', settings.startTime);\n\t\tif (settings.duration_time)\n\t\t\tthis.addCommand('-t', settings.duration_time);\n\t\tif (settings.frame_rate)\n\t\t\tthis.addCommand('-r', settings.frame_rate);\n\n\t\t// Setting the size and padding settings\n\t\tthis.setVideoSize(settings.size, settings.keep_pixel_aspect_ratio, settings.keep_aspect_ratio, settings.padding_color);\n\t\t// Get the dimensions\n\t\tvar newDimension = _calculateNewDimension.call(this);\n\t\t// Apply the size and padding commands\n\t\tthis.addCommand('-s', newDimension.width + 'x' + newDimension.height);\n\t\t// CHeck if isset aspect ratio options\n\t\tif (newDimension.aspect != null) {\n\t\t\tthis.addFilterComplex('scale=iw*sar:ih, pad=max(iw\\\\,ih*(' + newDimension.aspect.x + '/' + newDimension.aspect.y + ')):ow/(' + newDimension.aspect.x + '/' + newDimension.aspect.y + '):(ow-iw)/2:(oh-ih)/2' + (settings.padding_color != null ? ':' + settings.padding_color : ''));\n\t\t\tthis.addCommand('-aspect', newDimension.aspect.string);\n\t\t}\n\n\t\tif (settings.number)\n\t\t\tthis.addCommand('-vframes', settings.number);\n\t\tif (settings.every_n_frames) {\n\t\t\tthis.addCommand('-vsync', 0);\t\t\t\t\t\n\t\t\tthis.addFilterComplex('select=not(mod(n\\\\,' + settings.every_n_frames + '))');\n\t\t}\n\t\tif (settings.every_n_seconds) {\n\t\t\tthis.addCommand('-vsync', 0);\n\t\t\tthis.addFilterComplex('select=not(mod(t\\\\,' + settings.every_n_seconds + '))');\n\t\t}\n\t\tif (settings.every_n_percentage) {\n\t\t\tthis.addCommand('-vsync', 0);\n\t\t\tthis.addFilterComplex('select=not(mod(t\\\\,' + parseInt((this.metadata.duration.seconds / 100) * settings.every_n_percentage) + '))');\n\t\t}\n\t\t\n\t\t// Add destination file path to the command list\n\t\tsetOutput([destinationFolder,settings.file_name].join('/'));\n\n\t\t// Executing the commands list\n\t\treturn execCommand.call(this, callback, destinationFolder);\n\t}\n\n\t/**\n\t * Add a watermark to the video and save it\n\t */\n\tthis.fnAddWatermark = function (watermarkPath /* newFilepath , settings, callback */) {\n\n\t\tvar newFilepath\t\t= null\n\t\t  , newSettings\t\t= null\n\t\t  , callback\t\t= null;\n\t\t  \n\t\t// Scan all arguments\n\t\tfor (var i = 1; i < arguments.length; i++) {\n\t\t\t// Check the type of the argument\n\t\t\tswitch (typeof arguments[i]) {\n\t\t\t\tcase 'string':\n\t\t\t\t\tnewFilepath = arguments[i];\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\tnewSettings = arguments[i];\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'function':\n\t\t\t\t\tcallback = arguments[i];\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tresetCommands(this);\n\n\t\t// Call the function to add the watermark options\n\t\tthis.setWatermark(watermarkPath, newSettings, true);\n\t\t\n\t\tif (newFilepath == null)\n\t\t\tnewFilepath = path.dirname(this.file_path) + '/' + \n\t\t\t\t\t\t  path.basename(this.file_path, path.extname(this.file_path)) + '_watermark_' + \n\t\t\t\t\t\t  path.basename(watermarkPath, path.extname(watermarkPath)) + \n\t\t\t\t\t\t  path.extname(this.file_path);\n\t\t\n\t\t// Add destination file path to the command list\n\t\tsetOutput(newFilepath);\n\n\t\t// Executing the commands list\n\t\treturn execCommand.call(this, callback);\n\t}\n\t\n\t/**\n\t * Constructor\n\t */\n\tvar __constructor = function (self) {\n\t\tresetCommands(self);\n\t}(this);\n}","/home/travis/build/npmtest/node-npmtest-ffmpeg/node_modules/ffmpeg/lib/presets.js":"module.exports.size = {\n\t'SQCIF'\t\t: '128x96'\n  ,\t'QCIF'\t\t: '176x144'\n  ,\t'CIF'\t\t: '352x288'\n  ,\t'4CIF'\t\t: '704x576'\n  ,\t'QQVGA'\t\t: '160x120'\n  ,\t'QVGA'\t\t: '320x240'\n  ,\t'VGA'\t\t: '640x480'\n  ,\t'SVGA'\t\t: '800x600'\n  ,\t'XGA'\t\t: '1024x768'\n  ,\t'UXGA'\t\t: '1600x1200'\n  ,\t'QXGA'\t\t: '2048x1536'\n  ,\t'SXGA'\t\t: '1280x1024'\n  ,\t'QSXGA'\t\t: '2560x2048'\n  ,\t'HSXGA'\t\t: '5120x4096'\n  ,\t'WVGA'\t\t: '852x480'\n  ,\t'WXGA'\t\t: '1366x768'\n  ,\t'WSXGA'\t\t: '1600x1024'\n  ,\t'WUXGA'\t\t: '1920x1200'\n  ,\t'WOXGA'\t\t: '2560x1600'\n  ,\t'WQSXGA'\t: '3200x2048'\n  ,\t'WQUXGA'\t: '3840x2400'\n  ,\t'WHSXGA'\t: '6400x4096'\n  ,\t'WHUXGA'\t: '7680x4800'\n  ,\t'CGA'\t\t: '320x200'\n  ,\t'EGA'\t\t: '640x350'\n  ,\t'HD480'\t\t: '852x480'\n  ,\t'HD720'\t\t: '1280x720'\n  ,\t'HD1080'\t: '1920x1080'\n}\n\nmodule.exports.ratio = {\n\t'4:3'\t\t: 1.33\n  , '3:2'\t\t: 1.5\n  , '14:9'\t\t: 1.56\n  , '16:9'\t\t: 1.78\n  , '21:9'\t\t: 2.33\n}\n\nmodule.exports.audio_channel = {\n\t'mono'\t\t: 1\n  ,\t'stereo'\t: 2\n}"}